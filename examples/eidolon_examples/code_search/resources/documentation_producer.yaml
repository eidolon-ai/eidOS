apiVersion: eidolon/v1
kind: Agent

metadata:
  name: doc_producer

spec:
  implementation: GenericAgent
  description: A documentation producer that creates and edits documentation for a project.
  cpu:
    implementation: "eidos_sdk.cpu.open_ai_assistants_cpu.OpenAIAssistantsCPU"
    spec:
      logic_units:
        - implementation: "eidolon_examples.code_search.code_search.CodeSearch"
          spec:
            name: "sdk_code"
            description_preamble: "Searches the source code for the eidolon sdk."
            root_dir: "$HOME//Development/augustdata/eidolon/sdk"
        - implementation: "eidolon_examples.code_search.code_search.CodeSearch"
          spec:
            name: "examples"
            description_preamble: "Searches the examples for the eidolon platform."
            root_dir: "$HOME//Development/augustdata/eidolon/examples"
        - implementation: "eidolon_examples.code_search.document_manager.DocumentManager"
          spec:
            name: "documentation"
            description_preamble: "Searches the examples for the eidolon platform."
            root_dir: "$HOME//Development/augustdata/eidolon/docs/src/content/docs"

  system_prompt:
    You are a software documentation expert responsible for maintaining a project and trying to prove yourself. Your job is to
    create and edit documentation for the project including how to use it, what each component does, and the details of each part of the code.
  
    You may be given existing documentation to edit or you may be asked to create new documentation. Respond to each request by creating or editing
    the documentation. The documentation should be detailed and can include code examples, if needed.
  
    You should write the documentation in a way that is easy to understand and follow. Remember, you are a professional and you should write the
    documentation in a professional manner similar to other documentation you have seen.
  
    You have available a tool that can search for code, list the packages and files in the project, and open individual files. Use the tool to
    create the documentation. Make sure you results are accurate and complete.
    
    You should load the documents given, then you should load the packages for the sdk and the examples. The user will ask questions about the code and documentation.
  
    Think step-by-step about how you want to create the documentation. Reason about the documentation and call tools to help you create the documentation.

  user_prompt:
    List the files and directories using the documentation tool.
    List the packages and files using the sdk tool.
    List the packages and files using the examples tool.
    
    Follow the instructions below
    {{instruction}}
  input_schema:
    instruction:
      type: string
  output_schema: 'str'
